---
alwaysApply: true
---

# Levr Protocol v1 — Integration Guide

Integration guide for the modular Levr protocol with Clanker v4 on Base Mainnet.

## Quick Reference

### Network

- **Chain**: Base Mainnet (`8453`)
- **Test Fork**: Use `BASE_RPC_URL` environment variable

### Core Architecture

```
LevrFactory_v1 (singleton)
  ↓ register(clankerToken) — gated by tokenAdmin
  ├─→ LevrTreasury_v1 (per-token clone)
  ├─→ LevrGovernor_v1 (per-token clone)
  ├─→ LevrStaking_v1 (per-token instance)
  └─→ LevrStakedToken_v1 (per-token instance)
```

### Treasury Detection

- **Method**: Simulated calls (deterministic CREATE2)
- **Flow**: `simulateDeployToken` → `simulateRegister` → treasury address
- **No fallback**: Treasury is always freshly deployed per registration

---

## Contracts

### LevrFactory_v1

**Role**: Global registry and deployment coordinator

**Key Functions**:

- `register(clankerToken)` — Deploy full project stack (treasury, governor, staking, stakedToken)
  - **Access**: Callable only by `clankerToken.tokenAdmin()`
  - **Returns**: `(treasury, governor, staking, stakedToken)` addresses
- `getProjectContracts(clankerToken)` — Query deployed addresses
- `updateConfig(cfg)` — Update protocol config (owner-only)
- `streamWindowSeconds()` — Global reward streaming window

**Storage**:

- Protocol config (fees, limits, tiers)
- Project registry mapping: `clankerToken → (treasury, governor, staking, stakedToken)`
- Implementation addresses for cloning

---

### LevrTreasury_v1

**Role**: Asset custody and execution (no wrapping)

**Key Functions**:

- `transfer(to, amount)` — Execute governor-approved transfers
- `applyBoost(amount)` — Move tokens to staking; accrue rewards via `staking.accrueFromTreasury`

**Access**: Governor-only execution
**Security**: Non-reentrant, balance validation

---

### LevrGovernor_v1

**Role**: Governance and proposal lifecycle

**Key Functions**:

- `proposeTransfer(receiver, amount, reason, tier)` — Create transfer proposal
- `proposeBoost(amount, tier)` — Create staking boost proposal
- `execute(proposalId)` — Execute approved proposal

**Validation**:

- Balance requirements (min staked token to submit)
- Tier limits (transfer amounts, boost percentages)
- Rolling submission windows (7-day)
  - Deadline enforcement

---

### LevrStaking_v1

**Role**: Stake escrow and multi-token reward accounting

**Key Functions**:

- `stake(amount)`, `unstake(amount, to)`
- `accrueRewards(token, amount)` — Manual accrual (delta-based)
- `accrueFromTreasury(token, amount, pull)` — Boost accrual; measures received delta
- `claimRewards(tokens[], to)` — Multi-token claim

**Features**:

- 1:1 mint/burn of `LevrStakedToken_v1`
- Per-token reward accumulators
- Reward reserve tracking (prevents double-counting)
- ERC-1363 auto-credit via `onTransferReceived`
- Liquidity-guarded claims (revert if insufficient reserves)

---

### LevrStakedToken_v1

**Role**: ERC20 representation of staked balances

**Control**: Exclusive mint/burn by staking contract

---

## Fee & Reward Integration

### Clanker Fee Recipients

**Recommended**: Set LP fees/airdrop recipient to **staking contract**

### Reward Accrual Paths

1. **ERC-1363 auto-credit**: Staking auto-detects transfers via `onTransferReceived`; resets stream window
2. **Governor boosts**: `treasury.applyBoost(amount)` → `staking.accrueFromTreasury(token, amount, pull=true)`
3. **Manual accrual**: External caller via `staking.accrueRewards(token, amount)`

### Delta-Based Accounting

- Staking measures **actual received delta** (not trusting `amount` parameter)
- Prevents double-accounting; tracks reward reserves per token
- Claims gated by liquidity checks

---

## Testing Strategy

### Fork Setup

All tests inherit from `BaseForkTest` for automatic Base Mainnet forking:

```solidity
import {BaseForkTest} from "test/utils/BaseForkTest.sol";

contract MyTest is BaseForkTest {
    // Fork automatically set up in BaseForkTest.setUp()
    // Chain ID: 8453 (Base Mainnet)
}
```

**RPC Configuration** (in `foundry.toml`):

```toml
[rpc_endpoints]
base-mainnet = "${BASE_RPC_URL}"
```

### Test Coverage

**Unit Tests**:

- `test/unit/LevrFactoryV1.t.sol` — Registration, config updates, access control
- `test/unit/LevrStakingV1.t.sol` — Stake/unstake, accrual paths, claims
- `test/unit/LevrGovernorV1.t.sol` — Proposal gating, tiers, execution
- `test/unit/LevrTreasuryV1.t.sol` — Governor execution, access validation

**E2E Tests**:

- `test/e2e/LevrV1.Registration.t.sol` — Full registration flow
- `test/e2e/LevrV1.Governance.t.sol` — Proposal lifecycle with deadlines
- `test/e2e/LevrV1.Treasury.t.sol` — Airdrop → boost → claim flow

**Helpers**:

- `test/utils/BaseForkTest.sol` — Base test contract with automatic fork setup
- `test/utils/MerkleAirdropHelper.sol` — Single-leaf Merkle root builder for treasury-only airdrops
- `test/mocks/MockERC1363.sol` — ERC-1363 compatible token for testing auto-credit

---

## Deployment

### Scripts

- `script/DeployLevrFactoryDevnet.s.sol` — Deploy factory with initial config

### Example Flow

```solidity
// 1. Deploy factory
LevrFactory_v1 factory = new LevrFactory_v1(config);

// 2. Simulate to get treasury address (off-chain)
address predictedTreasury = simulateRegister(clankerToken);

// 3. Deploy Clanker token with predictedTreasury as fee/airdrop recipient
// (Clanker deployment step)

// 4. Register (on-chain, as tokenAdmin)
vm.prank(tokenAdmin);
(address treasury, address governor, address staking, address stakedToken)
= factory.register(clankerToken);

// Treasury address matches prediction
assert(treasury == predictedTreasury);
```

---

## Security Checklist

- [x] `register` gated by `tokenAdmin` only
- [x] Treasury execution gated by governor
- [x] Proposal submission gated by min staked token balance
- [x] Non-reentrant guards on treasury + staking accrual paths
- [x] Delta-based reward accounting (no trust of `amount` params)
- [x] Reward reserve tracking to prevent overdraw
- [x] Tier validation and rolling submission limits
- [x] Deadline enforcement on proposals

---

## Key Changes from Prior Versions

### Removed

- ❌ `deployTreasury()` function (treasury always deployed via `register`)
- ❌ `treasuryAddress` constructor param
- ❌ Treasury fallback logic (no reusing existing treasuries)
- ❌ Wrapper token (direct staking of underlying)

### Added

- ✅ `tokenAdmin` gating on `register`
- ✅ Deterministic treasury detection via simulation
- ✅ Staking-based governance (no wrapper intermediary)
- ✅ Multi-token reward accounting
- ✅ ERC-1363 auto-credit for reward tokens

---

## References

- **Protocol Rules**: `.cursor/rules/protocol.mdc`
- **Clanker Integration**: `.cursor/rules/clanker_sc.mdc`, `.cursor/rules/clanker_sdk.mdc`
- **Foundry Docs**: [book.getfoundry.sh](https://book.getfoundry.sh)
