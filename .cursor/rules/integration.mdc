## Integration Rule — Clanker x Lever (Base Sepolia Fork + Code/Test wiring)

This document standardizes how we integrate the monolithic `MasterLever_v1` with Clanker v4 on a forked network and how to wire contracts (`src/*.sol`, `src/interfaces/I*.sol`) and tests (`test/*.t.sol`).

## Network Fork

- **Chain**: Base Sepolia
- **Chain ID**: 84532

### Clanker Contracts (Base Sepolia)

| Contract                      | Address                                      |
| ----------------------------- | -------------------------------------------- |
| ClankerHookDynamicFeeV2       | `0xBF4983dC0f2F8FE78C5cf8Fc621f294A993728Cc` |
| ClankerHookStaticFeeV2        | `0x11b51DBC2f7F683b81CeDa83DC0078D57bA328cc` |
| ClankerSniperAuctionV2        | `0x8CBD6694A9DFc0eF4D1cd333e013B88E7003E10A` |
| ClankerSniperUtilV2           | `0x4DC6348D38E3e199D7Ea032c8cfE4EbDe94b442A` |
| ClankerAirdropV2              | `0x5c68F1560a5913c176Fc5238038098970B567B19` |
| ClankerPoolExtensionAllowlist | `0x532d79D18F0F1782884662fCC1e74581A3289680` |

Notes:

- These are read-only anchors for integration and testing. Actual pool deployments (PoolKey/PoolId) are per-token and not global.

## Project Structure

```
/Users/anon/Desktop/mguleryuz/lever/
├── .cursor/rules/
│   ├── integration.mdc     # This file
│   ├── protocol.mdc        # Lever protocol rules
│   ├── clanker_sc.mdc      # Clanker Smart Contract overview
│   └── clanker_sdk.mdc     # Clanker SDK usage
├── lib/
│   ├── forge-std/          # Foundry testing utilities
│   ├── openzeppelin-contracts/  # OZ contracts
│   └── v4-core/            # Uniswap v4 core contracts
├── src/
│   ├── interfaces/
│   │   ├── IMasterLever_v1.sol              # Lever protocol interface
│   │   └── external/                     # External dependencies
│   │       ├── IPoolManager.sol          # Uniswap v4 PoolManager (minimal)
│   │       ├── IProtocolFees.sol         # Protocol fee management
│   │       ├── IClankerHookDynamicFee.sol    # Dynamic fee queries
│   │       ├── IClankerHookV2.sol            # Main Clanker hook
│   │       ├── IClankerHook.sol              # Base Clanker hook
│   │       ├── IClankerHookV2PoolExtension.sol   # Pool extensions
│   │       ├── IClankerPoolExtensionAllowlist.sol # Extension governance
│   │       └── IOwnerAdmins.sol            # Admin management
│   └── *.sol                    # Contract implementations (TBD)
├── test/
│   └── *.t.sol                 # Foundry tests (TBD)
├── script/
│   └── ExampleDeploy.s.sol     # Deployment scripts
├── foundry.toml                # Foundry configuration
├── remappings.txt              # Import remappings
└── Makefile                    # Build automation
```

## Dependencies & Remappings

- **Installed via forge:**

  - `@uniswap/v4-core` - Uniswap v4 core contracts
  - `forge-std` - Foundry testing utilities
  - `openzeppelin-contracts` - OpenZeppelin contracts

- **Remappings** (`remappings.txt`):
  ```
  @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
  @uniswap/v4-core/=lib/v4-core/src/
  forge-std/=lib/forge-std/src/
  ```

## Contract Integration (src/_.sol, src/interfaces/I_.sol)

- **Core contracts** (to be implemented)

  - `src/MasterLever_v1.sol`
    - Stores per-pool config keyed by `leverId` (see protocol rule).
    - `registerPool(underlying, poolManager, poolKeyEncoded, name, symbol)` creates or wires an ERC20 wrapper (OpenZeppelin based) and persists the `leverId` mapping.
    - Mint/redeem escrow with FCFS solvency; staking with global `rewardIndexX64`; `harvest(leverId)` with v4 unlock discipline collecting protocol fees.
  - `src/IssuanceToken.sol`
    - OpenZeppelin ERC20 + AccessControl.
    - Roles: `DEFAULT_ADMIN_ROLE` = deployer; `MINTER_ROLE` = deployer and `MasterLever_v1`.
    - Decimals should mirror underlying.

- **Interfaces** (implemented)

  - `src/interfaces/IMasterLever_v1.sol`: complete external surface for registration, mint/redeem, stake/unstake/claim, harvest, and views.
  - `src/interfaces/external/IPoolManager.sol`: minimal subset for `unlock`, `collectProtocolFees`, `protocolFeesAccrued`.
  - `src/interfaces/external/IProtocolFees.sol`: protocol fee controller interface.
  - `src/interfaces/external/IClankerHookDynamicFee.sol`: read-only vars for fee state and dynamic fee queries.
  - `src/interfaces/external/IClankerHookV2.sol`: main Clanker hook interface with MEV module functions.
  - `src/interfaces/external/IClankerHook.sol`: base Clanker hook interface.
  - `src/interfaces/external/IClankerHookV2PoolExtension.sol`: pool extension callbacks.
  - `src/interfaces/external/IClankerPoolExtensionAllowlist.sol`: extension governance.
  - `src/interfaces/external/IOwnerAdmins.sol`: admin management interface.
  - Prefer `bytes poolKeyEncoded` over importing full Uniswap v4 types; compute `PoolId` from ABI-encoded `PoolKey` inside the contract.

- **Wiring and safety**
  - MasterLever must be set (or allowed) as protocol fee controller for pools you intend to harvest; otherwise fees remain unclaimed until attribution is enabled (see Fee Permissions in protocol rule).
  - Enforce no duplicate registration for the same `underlying`.
  - Optional: enforce currency exclusivity per `IPoolManager` to avoid ambiguous fee buckets; otherwise use extension metering.
  - Emit events for registration, mint, redeem, stake, unstake, claim, harvest.

## Tests Integration (test/\*.t.sol)

- **Fork configuration**

  - Set env variable `BASE_SEPOLIA_RPC_URL`.
  - Foundry CLI:
    ```bash
    forge test --fork-url $BASE_SEPOLIA_RPC_URL --chain-id 84532
    ```
  - In tests, select fork:
    ```solidity
    vm.createSelectFork(vm.envString("BASE_SEPOLIA_RPC_URL"));
    ```

- **Recommended test files**

  - `test/MasterLever.Register.t.sol`:
    - Deploy `MasterLever_v1`.
    - Provide live `poolManager` and `poolKeyEncoded` (or mock if needed) and call `registerPool`.
    - Assert wrapper roles: deployer and MasterLever have `MINTER_ROLE`.
  - `test/MasterLever.MintRedeemFCFS.t.sol`:
    - Transfer underlying to `MasterLever_v1` and mint wrapper to user; track `underlyingEscrowed` and `wrapper.totalSupply()`.
    - Over-mint via deployer and assert FCFS redemption behavior.
  - `test/MasterLever.StakeRewards.t.sol`:
    - Stake wrapper; simulate or collect fees; assert `rewardIndexX64` accrual and `claim` payout.
  - `test/MasterLever.Harvest.t.sol`:
    - With controller permissions set, call `harvest(leverId)`; verify unlock/collect path and per-pool crediting.
    - If buckets are shared, assert metering caps application.

- **Utilities and mocks**
  - If a real pool is not available on the fork, add minimal mocks for `IPoolManager` and call paths that return zero but exercise the unlock discipline without reverting.
  - Provide helpers to encode `PoolKey` into `bytes` for `registerPool`.

## Foundry Configuration

- **`foundry.toml`**:

  ```toml
  [profile.default]
  src = "src"
  out = "out"
  libs = ["lib"]
  evm_version = "cancun"
  optimizer = true
  optimizer_runs = 1_000_000

  [rpc_endpoints]
  base_sepolia = "${BASE_SEPOLIA_RPC_URL}"
  ```

- **`remappings.txt`** (automatically loaded):

  ```
  @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
  @uniswap/v4-core/=lib/v4-core/src/
  forge-std/=lib/forge-std/src/
  ```

- **Build commands:**

  ```bash
  forge build          # Build contracts
  forge build --silent # Build without verbose output
  forge test           # Run tests
  ```

- Use `StdCheats` and `vm` cheatcodes for fork selection and env access.

---

This rule is normative for integration and testing. Keep contract behavior aligned with the Protocol Rule (`.cursor/rules/protocol.mdc`) and Clanker integration expectations.
