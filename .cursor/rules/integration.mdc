---
alwaysApply: true
---

## Integration Rule v1 — Clanker x Levr Protocol v1 (Base Sepolia Fork + Code/Test wiring)

This document standardizes how we integrate the modular `LevrFactory_v1`, `LevrTreasury_v1`, `LevrGovernor_v1`, `LevrStaking_v1`, and `LevrStakedToken_v1` contracts with Clanker v4 on a forked network and how to wire contracts (`src/*.sol`, `src/interfaces/I*.sol`) and tests (`test/*.t.sol`).

## Network Fork

- **Chain**: Base Sepolia
- **Chain ID**: 84532

### Clanker Contracts (Base Sepolia)

| Contract                      | Address                                      |
| ----------------------------- | -------------------------------------------- |
| ClankerHookDynamicFeeV1       | `0xBF4983dC0f2F8FE78C5cf8Fc621f294A993728Cc` |
| ClankerHookStaticFeeV1        | `0x11b51DBC2f7F683b81CeDa83DC0078D57bA328cc` |
| ClankerSniperAuctionV1        | `0x8CBD6694A9DFc0eF4D1cd333e013B88E7003E10A` |
| ClankerSniperUtilV1           | `0x4DC6348D38E3e199D7Ea032c8cfE4EbDe94b442A` |
| ClankerAirdropV1              | `0x5c68F1560a5913c176Fc5238038098970B567B19` |
| ClankerPoolExtensionAllowlist | `0x532d79D18F0F1782884662fCC1e74581A3289680` |

Notes:

- These are read-only anchors for integration and testing. Actual pool deployments (PoolKey/PoolId) are per-token and not global.

## Project Structure

```
/Users/anon/Desktop/mguleryuz/levr/
├── .cursor/rules/
│   ├── integration_v1.md    # This file
│   ├── protocol_v1.md       # Levr v1 protocol rules
│   ├── clanker_sc.mdc       # Clanker Smart Contract overview
│   └── clanker_sdk.mdc      # Clanker SDK usage
├── lib/
│   ├── forge-std/           # Foundry testing utilities
│   ├── openzeppelin-contracts/  # OZ contracts
│   └── v4-core/             # Uniswap v4 core contracts
├── src/
│   ├── interfaces/
│   │   ├── ILevrFactory_v1.sol          # Factory interface
│   │   ├── ILevrTreasury_v1.sol         # Treasury interface
│   │   ├── ILevrGovernor_v1.sol         # Governor interface
│   │   ├── ILevrStaking_v1.sol          # Staking module interface
│   │   ├── ILevrStakedToken_v1.sol      # Staked token interface
│   │   └── external/                    # External dependencies
│   │       ├── IPoolManager.sol         # Uniswap v4 PoolManager (minimal)
│   │       ├── IProtocolFees.sol        # Protocol fee management
│   │       ├── IClankerHookDynamicFee.sol   # Dynamic fee queries
│   │       ├── IClankerHookV1.sol           # Main Clanker hook
│   │       ├── IClankerHook.sol             # Base Clanker hook
│   │       ├── IClankerHookV1PoolExtension.sol  # Pool extensions
│   │       ├── IClankerPoolExtensionAllowlist.sol # Extension governance
│   │       └── IOwnerAdmins.sol           # Admin management
│   ├── LevrFactory_v1.sol       # Factory contract
│   ├── LevrTreasury_v1.sol      # Treasury contract (cloneable)
│   ├── LevrGovernor_v1.sol      # Governor contract (cloneable)
│   ├── LevrStaking_v1.sol       # Staking contract (per-project)
│   ├── LevrStakedToken_v1.sol   # Staked ERC20 (per-project)
│   └── implementations/         # Base implementations for cloning
├── test/
│   ├── LevrFactoryV1.t.sol      # Factory tests
│   ├── LevrTreasuryV1.t.sol     # Treasury tests
│   ├── LevrGovernorV1.t.sol     # Governor tests
│   ├── LevrERC20.t.sol          # Wrapper tests
│   └── integration/             # Cross-contract integration tests
├── script/
│   ├── DeployLevrV1.s.sol       # Deployment script
│   └── ExampleDeploy.s.sol      # Example deployments
├── foundry.toml                 # Foundry configuration
├── remappings.txt               # Import remappings
└── Makefile                     # Build automation
```

## Dependencies & Remappings

- **Installed via forge:**

  - `@uniswap/v4-core` - Uniswap v4 core contracts
  - `forge-std` - Foundry testing utilities
  - `openzeppelin-contracts` - OpenZeppelin contracts
  - `clones-with-immutable-args` - ERC-1167 clones with immutable args

- **Remappings** (`remappings.txt`):
  ```
  @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
  @uniswap/v4-core/=lib/v4-core/src/
  forge-std/=lib/forge-std/src/
  clones-with-immutable-args/=lib/clones-with-immutable-args/src/
  ```

## Contract Integration (src/_.sol, src/interfaces/I_.sol)

### Core Contracts (to be implemented)

#### LevrFactory_v1.sol

- **Role**: Global factory and configuration manager
- **Key Functions**:
  - `register(clankerToken, params)`: Deploy or reuse treasury, deploy governor and wrapper
  - `updateConfig(cfg)`: Update protocol-wide configuration
- `getProjectContracts(clankerToken)`: Query deployed addresses (treasury, governor, staking, stakedToken)
- **Storage**:
  - Protocol configuration (fees, limits, tiers)
  - Project registry mappings
  - Implementation contract addresses for cloning
- **Dependencies**: Uses ERC-1167 clones for gas-efficient deployment

#### LevrTreasury_v1.sol (Cloneable)

- **Role**: Per-project asset custody and execution (no wrapping)
- **Key Functions**:
  - `transfer(to, amount)`: Execute governance-approved transfers
  - `applyBoost(amount)`: Move tokens to staking and accrue rewards
- **Storage**:
  - Underlying token address
  - Governor address
- **Security**: Non-reentrant guards, access control validation

#### LevrGovernor_v1.sol (Cloneable)

- **Role**: Per-project governance and proposal management
- **Key Functions**:
  - `proposeTransfer(receiver, amount, reason, tier)`
  - `proposeBoost(amount, tier)` (executes treasury.applyBoost)
  - `execute(proposalId)`
- **Storage**:
  - Active proposals with metadata
  - Rolling submission counters (7-day windows)
  - Proposal execution state
- **Validation**: Balance checks, tier limits, deadline enforcement

#### LevrStaking_v1.sol (Per-Project)

- **Role**: Escrow underlying stakes; mint/burn staked token; accrue/claim multi-token rewards
- **Key Functions**:
  - `stake(amount)`, `unstake(amount, to)`, `claimRewards(tokens, to)`
  - `accrueRewards(token, amount)`, `accrueFromTreasury(token, amount, pull)`
- **Storage**:
  - Underlying, stakedToken, per-token reward accumulators

#### LevrStakedToken_v1.sol (Per-Project)

- **Role**: ERC20 representing staked balances (mint/burn controlled by staking)

### Interfaces (Implemented)

- `src/interfaces/ILevrFactory_v1.sol`: Complete factory interface
- `src/interfaces/ILevrTreasury_v1.sol`: Treasury interface with wrap/unwrap and execution
- `src/interfaces/ILevrGovernor_v1.sol`: Governor interface with proposal management
- `src/interfaces/ILevrStaking_v1.sol`: Staking module interface
- `src/interfaces/ILevrStakedToken_v1.sol`: Staked token interface
- External interfaces same as v1 for Clanker integration

### Wiring and Safety

- **Fee Integration**: Treasury must be configured as Clanker fee/airdrop receiver; boosts transfer from treasury to staking
- **Access Control**: Governor-only treasury execution, balance-gated proposals
- **Reentrancy**: Guards on all external treasury functions
- **Validation**: Input validation at all boundaries
- **Events**: Comprehensive event emission for all state changes

## Tests Integration (test/\*.t.sol)

### Fork Configuration

- Set env variable `BASE_SEPOLIA_RPC_URL`
- Foundry CLI:
  ```bash
  forge test --fork-url $BASE_SEPOLIA_RPC_URL --chain-id 84532
  ```
- In tests, select fork:
  ```solidity
  vm.createSelectFork(vm.envString("BASE_SEPOLIA_RPC_URL"));
  ```

### Recommended Test Files

#### Factory Tests

- `test/LevrFactoryV1.t.sol`:
  - Deploy factory with initial config
  - Register projects with and without existing treasury
  - Validate deployed contract relationships
  - Test configuration updates (owner-only)

#### Staking & Treasury Tests

- `test/LevrStakingV1.t.sol`:
  - Stake/unstake flow and staked token mint/burn
  - Rewards accrual (accrueRewards, accrueFromTreasury) and claims
- `test/LevrTreasuryV1.Execution.t.sol`:
  - Governor-authorized transfers and boosts (applyBoost → staking)
  - Access control validation

#### Governor Tests

- `test/LevrGovernorV1.Proposals.t.sol`:
  - Proposal creation with balance requirements
  - Tier validation and submission limits
  - Rolling window enforcement
- `test/LevrGovernorV1.Execution.t.sol`:
  - Deadline enforcement
  - Atomic execution with treasury calls
  - Event emission and state cleanup

#### Integration Tests

- `test/integration/LevrV1.EndToEnd.t.sol`:
  - Flow: deploy → register → stake → airdrop to treasury → boost → claim
  - Multi-project isolation
  - Protocol fee forwarding; staking rewards accrual for both pool tokens

### Utilities and Mocks

- Mock Clanker tokens for testing without live pools
- Helper functions for tier configuration setup
- Event assertion utilities
- Time manipulation for deadline testing

## Foundry Configuration

### foundry.toml

```toml
[profile.default]
src = "src"
out = "out"
libs = ["lib"]
evm_version = "cancun"
optimizer = true
optimizer_runs = 1_000_000

[rpc_endpoints]
base_sepolia = "${BASE_SEPOLIA_RPC_URL}"
```

### remappings.txt (automatically loaded)

```
@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
@uniswap/v4-core/=lib/v4-core/src/
forge-std/=lib/forge-std/src/
clones-with-immutable-args/=lib/clones-with-immutable-args/src/
```

### Build Commands

```bash
forge build          # Build contracts
forge build --silent # Build without verbose output
forge test           # Run tests
forge test --fork-url $BASE_SEPOLIA_RPC_URL --chain-id 84532  # Fork tests
```

### Deployment Scripts

- `script/DeployLevrV1.s.sol`: Deploy factory and set initial configuration
- Use `StdCheats` and `vm` cheatcodes for testing utilities

---

This rule is normative for v1 integration and testing. Keep contract behavior aligned with the Protocol v1 Rule (`contracts/.cursor/rules/protocol_v1.md`) and Clanker integration expectations.

## Integration Rule v1 — Clanker x Levr Protocol v1 (Base Sepolia Fork + Code/Test wiring)

This document standardizes how we integrate the modular `LevrFactory_v1`, `LevrTreasury_v1`, `LevrGovernor_v1`, and `LevrERC20` contracts with Clanker v4 on a forked network and how to wire contracts (`src/*.sol`, `src/interfaces/I*.sol`) and tests (`test/*.t.sol`).

## Network Fork

- **Chain**: Base Sepolia
- **Chain ID**: 84532

### Clanker Contracts (Base Sepolia)

| Contract                      | Address                                      |
| ----------------------------- | -------------------------------------------- |
| ClankerHookDynamicFeeV1       | `0xBF4983dC0f2F8FE78C5cf8Fc621f294A993728Cc` |
| ClankerHookStaticFeeV1        | `0x11b51DBC2f7F683b81CeDa83DC0078D57bA328cc` |
| ClankerSniperAuctionV1        | `0x8CBD6694A9DFc0eF4D1cd333e013B88E7003E10A` |
| ClankerSniperUtilV1           | `0x4DC6348D38E3e199D7Ea032c8cfE4EbDe94b442A` |
| ClankerAirdropV1              | `0x5c68F1560a5913c176Fc5238038098970B567B19` |
| ClankerPoolExtensionAllowlist | `0x532d79D18F0F1782884662fCC1e74581A3289680` |

Notes:

- These are read-only anchors for integration and testing. Actual pool deployments (PoolKey/PoolId) are per-token and not global.

## Project Structure

```
/Users/anon/Desktop/mguleryuz/levr/
├── .cursor/rules/
│   ├── integration_v1.md    # This file
│   ├── protocol_v1.md       # Levr v1 protocol rules
│   ├── clanker_sc.mdc       # Clanker Smart Contract overview
│   └── clanker_sdk.mdc      # Clanker SDK usage
├── lib/
│   ├── forge-std/           # Foundry testing utilities
│   ├── openzeppelin-contracts/  # OZ contracts
│   └── v4-core/             # Uniswap v4 core contracts
├── src/
│   ├── interfaces/
│   │   ├── ILevrFactory_v1.sol          # Factory interface
│   │   ├── ILevrTreasury_v1.sol         # Treasury interface
│   │   ├── ILevrGovernor_v1.sol         # Governor interface
│   │   ├── ILevrERC20.sol               # Wrapper token interface
│   │   └── external/                    # External dependencies
│   │       ├── IPoolManager.sol         # Uniswap v4 PoolManager (minimal)
│   │       ├── IProtocolFees.sol        # Protocol fee management
│   │       ├── IClankerHookDynamicFee.sol   # Dynamic fee queries
│   │       ├── IClankerHookV1.sol           # Main Clanker hook
│   │       ├── IClankerHook.sol             # Base Clanker hook
│   │       ├── IClankerHookV1PoolExtension.sol  # Pool extensions
│   │       ├── IClankerPoolExtensionAllowlist.sol # Extension governance
│   │       └── IOwnerAdmins.sol           # Admin management
│   ├── LevrFactory_v1.sol       # Factory contract
│   ├── LevrTreasury_v1.sol      # Treasury contract (cloneable)
│   ├── LevrGovernor_v1.sol      # Governor contract (cloneable)
│   ├── LevrERC20.sol            # Wrapper ERC20 (cloneable)
│   └── implementations/         # Base implementations for cloning
├── test/
│   ├── LevrFactoryV1.t.sol      # Factory tests
│   ├── LevrTreasuryV1.t.sol     # Treasury tests
│   ├── LevrGovernorV1.t.sol     # Governor tests
│   ├── LevrERC20.t.sol          # Wrapper tests
│   └── integration/             # Cross-contract integration tests
├── script/
│   ├── DeployLevrV1.s.sol       # Deployment script
│   └── ExampleDeploy.s.sol      # Example deployments
├── foundry.toml                 # Foundry configuration
├── remappings.txt               # Import remappings
└── Makefile                     # Build automation
```

## Dependencies & Remappings

- **Installed via forge:**

  - `@uniswap/v4-core` - Uniswap v4 core contracts
  - `forge-std` - Foundry testing utilities
  - `openzeppelin-contracts` - OpenZeppelin contracts
  - `clones-with-immutable-args` - ERC-1167 clones with immutable args

- **Remappings** (`remappings.txt`):
  ```
  @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
  @uniswap/v4-core/=lib/v4-core/src/
  forge-std/=lib/forge-std/src/
  clones-with-immutable-args/=lib/clones-with-immutable-args/src/
  ```

## Contract Integration (src/_.sol, src/interfaces/I_.sol)

### Core Contracts (to be implemented)

#### LevrFactory_v1.sol

- **Role**: Global factory and configuration manager
- **Key Functions**:
  - `register(clankerToken, params)`: Deploy or reuse treasury, deploy governor and wrapper
  - `updateConfig(cfg)`: Update protocol-wide configuration
  - `getProjectContracts(clankerToken)`: Query deployed contract addresses
- **Storage**:
  - Protocol configuration (fees, limits, tiers)
  - Project registry mappings
  - Implementation contract addresses for cloning
- **Dependencies**: Uses ERC-1167 clones for gas-efficient deployment

#### LevrTreasury_v1.sol (Cloneable)

- **Role**: Per-project asset custody and execution
- **Key Functions**:
  - `wrap(amount, to)`: Accept underlying, mint wrapper tokens (minus fees)
  - `unwrap(amount, to)`: Burn wrapper, return underlying (minus fees)
  - `transfer(to, amount)`: Execute governance-approved transfers
  - `applyBoost(amount)`: Apply staking boost
  - `collectFees()`: Collect Clanker emissions
- **Storage**:
  - Underlying token address
  - Governor and wrapper contract addresses
  - Fee collection accounting
- **Security**: Non-reentrant guards, access control validation

#### LevrGovernor_v1.sol (Cloneable)

- **Role**: Per-project governance and proposal management
- **Key Functions**:
  - `proposeTransfer(receiver, amount, reason, tier)`: Create transfer proposal
  - `proposeBoost(amount, tier)`: Create boost proposal
  - `execute(proposalId)`: Execute approved proposal
- **Storage**:
  - Active proposals with metadata
  - Rolling submission counters (7-day windows)
  - Proposal execution state
- **Validation**: Balance checks, tier limits, deadline enforcement

#### LevrERC20.sol (Cloneable)

- **Role**: Fee-enabled wrapper token
- **Key Functions**:
  - `mint(to, amount)`: Mint wrapper tokens (treasury-only)
  - `burn(from, amount)`: Burn wrapper tokens (treasury-only)
- **Storage**:
  - Mirrors underlying token decimals
  - Standard ERC20 balances and allowances
- **Access**: Treasury has exclusive mint/burn rights

### Interfaces (Implemented)

- `src/interfaces/ILevrFactory_v1.sol`: Complete factory interface
- `src/interfaces/ILevrTreasury_v1.sol`: Treasury interface with wrap/unwrap and execution
- `src/interfaces/ILevrGovernor_v1.sol`: Governor interface with proposal management
- `src/interfaces/ILevrERC20.sol`: Wrapper token interface extending ERC20
- External interfaces same as v1 for Clanker integration

### Wiring and Safety

- **Fee Integration**: Treasury must be configured as Clanker fee receiver
- **Access Control**: Governor-only treasury execution, balance-gated proposals
- **Reentrancy**: Guards on all external treasury functions
- **Validation**: Input validation at all boundaries
- **Events**: Comprehensive event emission for all state changes

## Tests Integration (test/\*.t.sol)

### Fork Configuration

- Set env variable `BASE_SEPOLIA_RPC_URL`
- Foundry CLI:
  ```bash
  forge test --fork-url $BASE_SEPOLIA_RPC_URL --chain-id 84532
  ```
- In tests, select fork:
  ```solidity
  vm.createSelectFork(vm.envString("BASE_SEPOLIA_RPC_URL"));
  ```

### Recommended Test Files

#### Factory Tests

- `test/LevrFactoryV1.t.sol`:
  - Deploy factory with initial config
  - Register projects with and without existing treasury
  - Validate deployed contract relationships
  - Test configuration updates (owner-only)

#### Treasury Tests

- `test/LevrTreasuryV1.WrapUnwrap.t.sol`:
  - End-to-end wrap/unwrap with fee calculation
  - Fee split between protocol and project treasury
  - Balance invariants and accounting
- `test/LevrTreasuryV1.Execution.t.sol`:
  - Governor-authorized transfers and boosts
  - Access control validation
  - Reentrancy protection

#### Governor Tests

- `test/LevrGovernorV1.Proposals.t.sol`:
  - Proposal creation with balance requirements
  - Tier validation and submission limits
  - Rolling window enforcement
- `test/LevrGovernorV1.Execution.t.sol`:
  - Deadline enforcement
  - Atomic execution with treasury calls
  - Event emission and state cleanup

#### Integration Tests

- `test/integration/LevrV1.EndToEnd.t.sol`:
  - Complete user flow: deploy → register → wrap → propose → execute
  - Multi-project isolation
  - Fee collection from Clanker emissions

### Utilities and Mocks

- Mock Clanker tokens for testing without live pools
- Helper functions for tier configuration setup
- Event assertion utilities
- Time manipulation for deadline testing

## Foundry Configuration

### foundry.toml

```toml
[profile.default]
src = "src"
out = "out"
libs = ["lib"]
evm_version = "cancun"
optimizer = true
optimizer_runs = 1_000_000

[rpc_endpoints]
base_sepolia = "${BASE_SEPOLIA_RPC_URL}"
```

### remappings.txt (automatically loaded)

```
@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/
@uniswap/v4-core/=lib/v4-core/src/
forge-std/=lib/forge-std/src/
clones-with-immutable-args/=lib/clones-with-immutable-args/src/
```

### Build Commands

```bash
forge build          # Build contracts
forge build --silent # Build without verbose output
forge test           # Run tests
forge test --fork-url $BASE_SEPOLIA_RPC_URL --chain-id 84532  # Fork tests
```

### Deployment Scripts

- `script/DeployLevrV1.s.sol`: Deploy factory and set initial configuration
- Use `StdCheats` and `vm` cheatcodes for testing utilities

---

This rule is normative for v1 integration and testing. Keep contract behavior aligned with the Protocol v1 Rule (`contracts/.cursor/rules/protocol_v1.md`) and Clanker integration expectations.
